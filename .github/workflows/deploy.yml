name: Deploy Static Content to GitHub Pages

on:
    pull_request:
        branches: ["main"]
    push:
        branches: ["main"]
    workflow_dispatch:

permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: "pages"
    cancel-in-progress: true

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Install Linux dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y webp

            - name: Install ImageMagick
              uses: mfinelli/setup-imagemagick@v6

            - name: Generate cache key
              id: cache-key
              run: |
                  # Create a hash of image files and the optimization script
                  find public -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | sort | xargs ls -la | sha256sum > image_manifest.txt
                  echo "key=${{ runner.os }}-images-$(sha256sum image_manifest.txt ci/optimize-images.sh | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

            - name: Cache optimized images
              id: images-cache
              uses: actions/cache@v4
              with:
                  path: |
                      public/**/*.webp
                      public/**/*-thumbnails/**
                  key: ${{ steps.cache-key.outputs.key }}
                  restore-keys: |
                      ${{ runner.os }}-images-

            - name: Run image optimization
              if: steps.images-cache.outputs.cache-hit != 'true'
              run: |
                  echo "Cache miss - optimizing images..."
                  bash ci/optimize-images.sh --all
              env:
                  CPU: 2 # GitHub runners have 2 cores

            - name: Enable Corepack
              run: corepack enable

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: "yarn"

            - name: Install Dependencies
              run: yarn install --immutable

            - name: Build Project
              run: yarn build

            - name: Upload Build Artifacts
              uses: actions/upload-pages-artifact@v3
              with:
                  path: "./build"

    deploy:
        needs: build
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup GitHub Pages
              uses: actions/configure-pages@v4

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
